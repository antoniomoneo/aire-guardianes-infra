name: Deploy aire-guardianes → Cloud Run (infra repo)

on:
  push:
    branches: [ "main" ]
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: "Versión (p.ej. v2025.08.28-1). Si se omite, se usa el SHA."
        required: false
        type: string

env:
  PROJECT_ID: aire-470107
  REGION: us-west1
  SERVICE: aire-guardianes
  AR_REPO: aire-guardianes-app
  IMAGE_NAME: aire-guardianes
  RUNTIME_SA: aire-deployer@aire-470107.iam.gserviceaccount.com
  APP_REPO: antoniomoneo/AIRE---Guardianes-del-Aire

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout infra repo (this repo)
        uses: actions/checkout@v4

      - name: Clone app repo via PAT
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
          APP_REPO: ${{ env.APP_REPO }}
        run: |
          set -euxo pipefail
          rm -rf app
          git clone --depth=1 "https://${GH_PAT}@github.com/${APP_REPO}.git" app
          cd app
          git fetch origin main --depth=1 || true
          git checkout -q main || true

      # === PREBUILD DIAGNÓSTICO EN EL RUNNER ===
      - name: Prebuild en runner (log detallado)
        working-directory: app
        run: |
          set -euxo pipefail
          node -v
          npm -v
          npm ci || npm install
          # nivel de log alto para ver errores reales
          npm config set loglevel verbose
          npm run build || {
            echo "::group::package.json"; cat package.json; echo "::endgroup::";
            echo "::group::vite.config.ts"; cat vite.config.ts || true; echo "::endgroup::";
            echo "::group::Listado app"; ls -la; echo "::endgroup::";
            echo "::group::tsconfig*"; ls -la tsconfig* || true; for f in tsconfig*.json; do [ -f "$f" ] && { echo "== $f =="; cat "$f"; }; done; echo "::endgroup::";
            exit 1;
          }

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev -q

      - name: Compute tags
        id: meta
        shell: bash
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            TAG="${{ github.event.inputs.version }}"
          elif [[ "${GITHUB_REF:-}" == refs/tags/* ]]; then
            TAG="${GITHUB_REF#refs/tags/}"
          else
            TAG="${GITHUB_SHA}"
          fi
          echo "TAG=$TAG" >> "$GITHUB_OUTPUT"

      - name: Build image (contexto raíz, Dockerfile en infra/, código en app/)
        env:
          DOCKER_BUILDKIT: "0"     # logs más claros
        run: |
          set -euxo pipefail
          IMAGE_BASE="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.AR_REPO }}/${{ env.IMAGE_NAME }}"
          docker build \
            --no-cache \
            --progress=plain \
            -f infra/Dockerfile \
            -t "${IMAGE_BASE}:${{ steps.meta.outputs.TAG }}" \
            .

      - name: Push image
        run: |
          set -euxo pipefail
          IMAGE_BASE="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.AR_REPO }}/${{ env.IMAGE_NAME }}"
          docker push "${IMAGE_BASE}:${{ steps.meta.outputs.TAG }}"

      - name: Deploy to Cloud Run
        run: |
          set -euxo pipefail
          IMAGE="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.AR_REPO }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.TAG }}"
          gcloud run deploy "${{ env.SERVICE }}" \
            --image "${IMAGE}" \
            --region "${{ env.REGION }}" \
            --service-account "${{ env.RUNTIME_SA }}" \
            --allow-unauthenticated \
            --ingress all \
            --set-secrets "GEMINI_API_KEY=GEMINI_API_KEY:latest"

      - name: Show Service URL
        run: |
          gcloud run services describe ${{ env.SERVICE }} \
            --region ${{ env.REGION }} \
            --format='value(status.url)'
