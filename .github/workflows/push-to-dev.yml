name: Push to Dev â€” deploy aire-guardianes-dev

on:
  workflow_dispatch:
    inputs:
      ref:
        description: "Rama/tag/commit de la app a desplegar (por defecto: main)"
        required: false
        type: string

env:
  PROJECT_ID: aire-470107
  REGION: us-west1
  SERVICE_DEV: aire-guardianes-dev
  AR_REPO: aire-guardianes-app
  IMAGE_NAME: aire-guardianes
  RUNTIME_SA: aire-deployer@aire-470107.iam.gserviceaccount.com
  APP_REPO: antoniomoneo/AIRE---Guardianes-del-Aire

jobs:
  push-to-dev:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout infra repo (this repo)
        uses: actions/checkout@v4

      - name: Clone app repo via PAT (ref for dev)
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
          APP_REPO: ${{ env.APP_REPO }}
          REF: ${{ inputs.ref }}
        run: |
          set -euxo pipefail
          REF_VALUE="${REF:-main}"
          echo "Using app ref: ${REF_VALUE}"
          rm -rf app
          git clone --depth=1 "https://${GH_PAT}@github.com/${APP_REPO}.git" app
          cd app
          git fetch origin "${REF_VALUE}" --depth=1 || true
          git checkout -q "${REF_VALUE}" || true

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev -q

      - name: Compute dev image tags
        id: meta
        shell: bash
        run: |
          cd app
          APP_SHA=$(git rev-parse HEAD)
          APP_SHORT=${APP_SHA:0:7}
          echo "APP_SHA=$APP_SHA" >> "$GITHUB_OUTPUT"
          echo "APP_SHORT=$APP_SHORT" >> "$GITHUB_OUTPUT"

      - name: Build and Push image for dev
        env:
          PROJECT_ID: ${{ env.PROJECT_ID }}
          REGION:     ${{ env.REGION }}
          REPO:       ${{ env.AR_REPO }}
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          APP_SHORT:  ${{ steps.meta.outputs.APP_SHORT }}
        run: |
          set -euxo pipefail
          export DOCKER_BUILDKIT=1
          IMAGE_BASE="${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPO}/${IMAGE_NAME}"
          docker build -f infra/Dockerfile -t "${IMAGE_BASE}:dev-${APP_SHORT}" .
          docker push "${IMAGE_BASE}:dev-${APP_SHORT}"
          echo "TAG=dev-${APP_SHORT}" >> $GITHUB_ENV

      - name: Deploy to Cloud Run (dev)
        env:
          PROJECT_ID: ${{ env.PROJECT_ID }}
          REGION:     ${{ env.REGION }}
          SERVICE:    ${{ env.SERVICE_DEV }}
          RUNTIME_SA: ${{ env.RUNTIME_SA }}
          REPO:       ${{ env.AR_REPO }}
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          TAG:        ${{ env.TAG }}
        run: |
          set -euxo pipefail
          IMAGE="${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPO}/${IMAGE_NAME}:${TAG}"
          gcloud run deploy "${SERVICE}" \
            --image "${IMAGE}" \
            --region "${REGION}" \
            --service-account "${RUNTIME_SA}" \
            --allow-unauthenticated \
            --ingress all \
            --port 8080 \
            --timeout 600 \
            --cpu 1 \
            --memory 512Mi \
            --set-env-vars "NO_INDEX=1" \
            --set-secrets "GEMINI_API_KEY=GEMINI_API_KEY:latest,GITHUB_TOKEN=GITHUB_TOKEN:latest"

      - name: Show Service URL (dev)
        run: |
          gcloud run services describe ${{ env.SERVICE_DEV }} \
            --region ${{ env.REGION }} \
            --format='value(status.url)'

