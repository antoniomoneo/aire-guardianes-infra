name: Deploy aire-guardianes → Cloud Run

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      version:
        description: "Versión opcional (p.ej. v2025.08.28-1)"
        required: false
        type: string

env:
  PROJECT_ID: aire-470107
  REGION: us-west1
  SERVICE: aire-guardianes
  AR_REPO: aire-guardianes-app
  IMAGE_NAME: aire-guardianes
  RUNTIME_SA: aire-deployer@aire-470107.iam.gserviceaccount.com
  APP_REPO: antoniomoneo/AIRE---Guardianes-del-Aire

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout infra
        uses: actions/checkout@v4

      - name: Checkout app (AI Studio repo)
        uses: actions/checkout@v4
        with:
          repository: ${{ env.APP_REPO }}
          token: ${{ secrets.GH_PAT }}
          path: app

      - name: Auth to GCP (via key file)
        shell: bash
        env:
          KEY_B64: ${{ secrets.GCP_SA_KEY_B64 }}
        run: |
          if [ -z "$KEY_B64" ]; then
            echo "ERROR: GCP_SA_KEY_B64 vacío"; exit 1
          fi
          CLEAN=$(printf "%s" "$KEY_B64" | tr -d '\r\n ')
          python3 - <<'PYIN'
import os,base64,sys
b=os.environ.get("CLEAN","")
if not b:
  print("Secret base64 vacío"); sys.exit(1)
try:
  raw=base64.b64decode(b, validate=True)
except Exception as e:
  print("Base64 decode error:", e); sys.exit(1)
out=os.path.join(os.environ["RUNNER_TEMP"], "sa.json")
open(out,"wb").write(raw)
print("SA key written to:", out)
PYIN
          gcloud auth activate-service-account --key-file="$RUNNER_TEMP/sa.json"
          gcloud config set project "${PROJECT_ID}"
          gcloud auth configure-docker "${REGION}-docker.pkg.dev" --quiet

      - name: Compute image tag
        id: meta
        shell: bash
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            TAG="${{ github.event.inputs.version }}"
          else
            TAG="${GITHUB_SHA}"
          fi
          echo "TAG=$TAG" >> $GITHUB_OUTPUT

      - name: Build image (Dockerfile de infra sobre código de la app)
        working-directory: app
        run: |
          docker build \
            -f ../infra/Dockerfile \
            -t ${REGION}-docker.pkg.dev/${PROJECT_ID}/${AR_REPO}/${IMAGE_NAME}:${{ steps.meta.outputs.TAG }} \
            .

      - name: Push image
        run: |
          docker push ${REGION}-docker.pkg.dev/${PROJECT_ID}/${AR_REPO}/${IMAGE_NAME}:${{ steps.meta.outputs.TAG }}

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${SERVICE} \
            --project=${PROJECT_ID} \
            --region=${REGION} \
            --image=${REGION}-docker.pkg.dev/${PROJECT_ID}/${AR_REPO}/${IMAGE_NAME}:${{ steps.meta.outputs.TAG }} \
            --platform=managed \
            --allow-unauthenticated \
            --ingress=all \
            --service-account=${RUNTIME_SA} \
            --set-secrets=GEMINI_API_KEY=GEMINI_API_KEY:latest

      - name: Show Service URL
        run: |
          gcloud run services describe ${SERVICE} \
            --region=${REGION} \
            --project=${PROJECT_ID} \
            --format='value(status.url)'
